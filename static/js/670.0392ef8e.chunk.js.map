{"version":3,"file":"static/js/670.0392ef8e.chunk.js","mappings":"oRAKMA,EAAe,CACnBC,MAAO,GACPC,SAAU,IAqDNC,EAAQC,EAAAA,GAAAA,KAAH,mOAYLC,EAASD,EAAAA,GAAAA,IAAH,yCAINE,EAAYF,EAAAA,GAAAA,OAAH,wWAkBf,EApFqB,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACtB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDR,aAAAA,EACAO,SAAAA,IAFME,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAIrBC,GAASC,EAAAA,EAAAA,KAATD,KAEAX,EAAoBQ,EAApBR,MAAOC,EAAaO,EAAbP,SAETY,EAAYC,EAAAA,EAAsBH,GAClCI,EAAeD,EAAAA,GAAyBH,GACxCK,EAAWF,EAAAA,GAAqBH,GACtC,OACE,UAACT,EAAD,CAAOe,OAAO,GAAGX,SAAUI,EAA3B,WAYE,UAACN,EAAD,YACE,mBAAOc,QAAQ,GAAf,UAAmBL,EAAnB,SACA,kBACEM,MAAOnB,EACPoB,KAAK,QACLC,SAAUZ,EACVa,KAAK,QACLC,YAAY,kIAGhB,UAACnB,EAAD,YACE,mBAAOc,QAAQ,GAAf,UAAmBH,EAAnB,SACA,kBACEI,MAAOlB,EACPmB,KAAK,WACLC,SAAUZ,EACVa,KAAK,WACLC,YAAY,iKAGhB,SAAClB,EAAD,CAAWiB,KAAK,SAAhB,SAA0BN,Q,8BCnB1BQ,EAASrB,EAAAA,GAAAA,GAAH,6DAINsB,EAAUtB,EAAAA,GAAAA,IAAH,6FAKb,EAhCkB,WAChB,IAAMuB,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,IAAYC,EAAAA,IAAhCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QACVC,GAAUC,EAAAA,EAAAA,KACRtB,GAASC,EAAAA,EAAAA,KAATD,KAMR,GAAIqB,EACF,OAAO,SAAC,KAAD,CAAUE,GAAG,iBAEtB,IAAMC,EAAUrB,EAAAA,GAAoBH,GACpC,OACE,UAACc,EAAD,CAASW,UAAU,YAAnB,WACE,SAACZ,EAAD,UAASW,KACT,SAACE,EAAD,CAAW/B,SAXC,SAAAgC,GACdZ,GAASa,EAAAA,EAAAA,IAAMD,OAWZR,IAAU,cAAGU,MAAO,CAAEC,MAAO,OAAnB,SAA6BV,S,gECR9C,IArBgB,SAAC,GAAgC,IAA9BhC,EAA6B,EAA7BA,aAAcO,EAAe,EAAfA,SAC/B,GAA0BoC,EAAAA,EAAAA,WAAS,UAAK3C,IAAxC,eAAOS,EAAP,KAAcmC,EAAd,KAiBA,MAAO,CAAEnC,MAAAA,EAAOmC,SAAAA,EAAUlC,aAfL,SAAC,GAAgB,IAAdmC,EAAa,EAAbA,OACdxB,EAAgBwB,EAAhBxB,KACFyB,EADkBD,EAAVzB,MAEdwB,GAAS,SAAAG,GAAS,yBACbA,GADa,cAEf1B,EAAOyB,QAU4BnC,aANnB,SAAAqC,GACnBA,EAAEC,iBACF1C,GAAS,UAAKE,IACdmC,GAAS,UAAK5C","sources":["components/LoginForm/LoginForm.jsx","components/pages/LoginPage.jsx","hooks/useForm.js"],"sourcesContent":["import useForm from '../../hooks/useForm';\nimport styled from 'styled-components';\nimport useLang from '../../hooks/useLang';\nimport contentText from '../../Lang/contentText.json';\n\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { lang } = useLang();\n\n  const { email, password } = state;\n\n  const userEmail = contentText.userEmail[lang];\n  const userPassword = contentText.userPassword[lang];\n  const loginBtn = contentText.loginBtn[lang];\n  return (\n    <SForm action=\"\" onSubmit={handleSubmit}>\n      {/* <div>\n        <label htmlFor=\"\">Имя пользователя:</label>\n        <input\n          value={name}\n          name=\"name\"\n          onChange={handleChange}\n          type=\"text\"\n          placeholder=\"Введите имя пользователя\"\n          required\n        />\n      </div> */}\n      <SField>\n        <label htmlFor=\"\">{userEmail}: </label>\n        <input\n          value={email}\n          name=\"email\"\n          onChange={handleChange}\n          type=\"email\"\n          placeholder=\"Введите email пользователя\"\n        />\n      </SField>\n      <SField>\n        <label htmlFor=\"\">{userPassword}: </label>\n        <input\n          value={password}\n          name=\"password\"\n          onChange={handleChange}\n          type=\"password\"\n          placeholder=\"Введите пароль пользователя\"\n        />\n      </SField>\n      <StyledBtn type=\"submit\">{loginBtn}</StyledBtn>\n    </SForm>\n  );\n};\n\nconst SForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n  justify-content: center;\n  width: 600px;\n  height: 100%;\n  padding: 20px;\n  border: solid black 1px;\n  font-size: 25px;\n`;\n\nconst SField = styled.div`\n  margin: 10px;\n`;\n\nconst StyledBtn = styled.button`\n  margin: auto;\n  margin-left: auto;\n  font-family: inherit;\n  font-size: 25px;\n\n  color: #210672;\n  width: 150px;\n  height: 40px;\n  cursor: pointer;\n\n  background-color: #4db0ea;\n  border-radius: 10px;\n  -moz-box-shadow: 6px 8px 4px #333333;\n  -webkit-box-shadow: 6px 8px 4px #333333;\n  box-shadow: 6px 8px 4px #333333;\n`;\n\nexport default RegisterForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\n\nimport { login } from '../../redux/auth/authOperations';\n\nimport { getAuthError } from '../../redux/selectors';\nimport useAuth from 'hooks/useAuth';\nimport styled from 'styled-components';\nimport useLang from '../../hooks/useLang';\nimport contentText from '../../Lang/contentText.json';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const { status, message } = useSelector(getAuthError);\n  const isLogin = useAuth();\n  const { lang } = useLang();\n\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/my-contacts\" />;\n  }\n  const logPage = contentText.logPage[lang];\n  return (\n    <Wrapper className=\"container\">\n      <STitle>{logPage}</STitle>\n      <LoginForm onSubmit={onLogin} />\n      {status && <p style={{ color: 'red' }}>{message}</p>}\n    </Wrapper>\n  );\n};\n\nconst STitle = styled.h2`\n  margin: 20px;\n  font-size: 35px;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport default LoginPage;\n","import { useState } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    const newValue = value;\n    setState(prevState => ({\n      ...prevState,\n      [name]: newValue,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n"],"names":["initialState","email","password","SForm","styled","SField","StyledBtn","onSubmit","useForm","state","handleChange","handleSubmit","lang","useLang","userEmail","contentText","userPassword","loginBtn","action","htmlFor","value","name","onChange","type","placeholder","STitle","Wrapper","dispatch","useDispatch","useSelector","getAuthError","status","message","isLogin","useAuth","to","logPage","className","LoginForm","data","login","style","color","useState","setState","target","newValue","prevState","e","preventDefault"],"sourceRoot":""}